Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.


program:

class Solution {
    public int longestOnes(int[] nums, int k) {
        int maxcount = 0;
        int left = 0;
        int zerocount = 0;
        for(int right =0;right<nums.length;right++)
        {
            if(nums[right] == 0)
            {
                zerocount++;
            }
            while(zerocount>k)
            {
                if(nums[left] == 0)
                {
                    zerocount--;
                }
                left++;
            }
            maxcount = Math.max(maxcount,right-left+1);
        }
        return maxcount;
    }
}

output:
nums =
[1,1,1,0,0,0,1,1,1,1,0]
k = 2
output = 6
